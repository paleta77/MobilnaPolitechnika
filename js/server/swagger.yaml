swagger: "2.0"
info:
  description: "Mobilna Politechnika to aplikacja ..."
  version: "0.0.0"
  title: "Mobilna Politechnika"
basePath: "/"
tags:
- name: "User"
  description: "Operations about user"
- name: "Grades"
  description: "Operations about grades"
- name: "Schedule"
  description: "Operations about schedule"
- name: "Search"
  description: "Operations about search"
schemes:
- "http"
- "https"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /login:
    post:
      tags:
      - "User"
      summary: "User login"
      description: "This can only be done by the logged in user."
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User credentials"
        required: true
        schema:
          properties:
            username:
              type: "string"
            password:
              type: "string"
          example:
              username: "admin"
              password: "1234"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              token:
                type: "string"
                description: "Contains login token, may be equal to null."
            example:
                msg: "OK"
                token: "12345678"
  /register:
    post:
      tags:
      - "User"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            username:
              type: "string"
            email:
              type: "string"
            password:
              type: "string"
          example:
              username: "new_user_123"
              email: "name@name.name"
              password: "strong_password"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"
  /logged:
    get:
      security:
        - Bearer: []
      tags:
      - "User"
      summary: "Is user logged"
      description: "Check if user auth is correct"
      operationId: "isLogged"
      produces:
      - "application/json"
      responses:
        default:
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'YES' when logged and 'NO' if not"
            example:
                msg: "YES"
  /logout:
    get:
      security:
        - Bearer: []
      tags:
      - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"
  /user:
    get:
      security:
        - Bearer: []
      tags:
      - "User"
      summary: "Get base user info"
      description: "This can only be done by the logged in user."
      operationId: "userInfo"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              user:
                $ref: "#/definitions/UserInfo"
            example:
                msg: "OK"
                user: {_id : 1324, name: user123, mail: user@user.com}

  /user/extralessons:
    get:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "Get user extra lessons"
      description: "This can only be done by the logged in user."
      operationId: "getExtra"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"
            #TODO: missing data
    put:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "Add extra lesson to user"
      description: "This can only be done by the logged in user."
      operationId: "addExtra"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user extra lesson object"
        required: true
        schema:
          properties:
            subject:
              type: "string"
            day:
              type: "number"
            hour:
              type: "number"
            length:
              type: "number"
            type:
              type: "string"
            classroom:
              type: "string"
            lecturer:
              type: "string"
          example:
            subject: "Matematyka"
            day: 1
            hour: 8.15
            length: 45
            type: "Lecture"
            classroom: "CTI 201/B19"
            lecturer: "Somebody"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"

    delete:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "Remove user extra lesson"
      description: "This can only be done by the logged in user."
      operationId: "deleteExtra"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            subject:
              type: "string"
            day:
              type: "number"
            hour:
              type: "number"
          example:
            subject: "Matematyka"
            day: 1
            hour: 8.15
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"

  /grades:
    get:
      security:
        - Bearer: []
      tags:
      - "Grades"
      summary: "Get user grades"
      description: "This can only be done by the logged in user."
      operationId: "getGrades"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              grades:
                type: array
                items:
                  $ref: "#/definitions/Grade"
            example:
                msg: "OK"
                grades: [{_id: 5dbda8ae6d25340046995b4c, user: "admin", semester: 1, subject: "Fizyka", value: 3, ects: 3}]  
    put:
      security:
        - Bearer: []
      tags:
      - "Grades"
      summary: "Add grade to user"
      description: "This can only be done by the logged in user."
      operationId: "addGrades"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            semester:
              type: "number"
            subject:
              type: "string"
            ects:
              type: "number"
            value:
              type: "number"
          example:
            semester: 1
            subject: "Matematyka 1"
            ects: 6
            value: 4
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"
    post:
      security:
        - Bearer: []
      tags:
      - "Grades"
      summary: "Update user grade"
      description: "This can only be done by the logged in user."
      operationId: "updateGrades"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            semester:
              type: "number"
            subject:
              type: "string"
            ects:
              type: "number"
            value:
              type: "number"
          example:
            semester: 1
            subject: "Matematyka 1"
            ects: 6
            value: 4
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"

    delete:
      security:
        - Bearer: []
      tags:
      - "Grades"
      summary: "Remove user grade"
      description: "This can only be done by the logged in user."
      operationId: "deleteGrades"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            semester:
              type: "number"
            subject:
              type: "string"
            ects:
              type: "number"
            value:
              type: "number"
          example:
            semester: 1
            subject: "Matematyka 1"
            ects: 6
            value: 4
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
            example:
                msg: "OK"
  /group:
    get:
      security:
        - Bearer: []
      tags:
      - "User"
      summary: "Get user group"
      description: "This can only be done by the logged in user."
      operationId: "getGroup"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              group:
                $ref: "#/definitions/Group"
            example:
                msg: "OK"
                group: {_id : 1324, field: Informatyka, semester: 3, mode: niestacjonarne}

    put:
      security:
        - Bearer: []
      tags:
      - "User"
      summary: "Set user group"
      description: "This can only be done by the logged in user."
      operationId: "setGroup"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          properties:
            groupid:
              $ref: "#/definitions/Group/properties/_id"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              group:
                $ref: "#/definitions/Group"
            example:
                msg: "OK"
                group: {_id : 1324, field: Informatyka, semester: 3, mode: niestacjonarne}

  /group/timetable:
    get:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "User group schedule"
      description: "Get user group schedule"
      operationId: "getGroupSch"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation handled"
          schema:
            $ref: "#/definitions/TimetableMessage"
  
  /lecturer/{lecturerName}/timetable:
    get:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "Lecturer schedule"
      description: "Get lecturer schedule"
      operationId: "getLecSch"
      produces:
      - "application/json"
      parameters:
      - name: "lecturerName"
        in: "path"
        description: "name of lectutere"
        required: true
        type: "string"
      responses:
        200:
          description: "Operation handled"
          schema:
            $ref: "#/definitions/TimetableMessage"


  /room/{roomName}/timetable:
    get:
      security:
        - Bearer: []
      tags:
      - "Schedule"
      summary: "Room schedule"
      description: "Get room schedule"
      operationId: "getRoomSch"
      produces:
      - "application/json"
      parameters:
      - name: "roomName"
        in: "path"
        description: "name of room"
        required: true
        type: "string"
      responses:
        200:
          description: "Operation handled"
          schema:
            $ref: "#/definitions/TimetableMessage"

  /search/group:
    get:
      security:
        - Bearer: []
      tags:
      - "Search"
      summary: "Search groups"
      description: "Search groups"
      operationId: "sGroup"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "query"
        description: "Query text"
        required: true
        type: "string"
      responses:
        200:
          description: "Operation handled"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
                description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
              group:
                type: array
                items:
                  $ref: "#/definitions/Group"
            example:
                msg: "OK"
                group: [{_id : 1324, field: Informatyka, semester: 3, mode: niestacjonarne}]

  /search/timetable:
    get:
      security:
        - Bearer: []
      tags:
      - "Search"
      summary: "Search user schedule"
      description: "Search user schedule"
      operationId: "tGroup"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "query"
        description: "Query text"
        required: true
        type: "string"
      responses:
        200:
          description: "Operation handled"
          schema:
            $ref: "#/definitions/TimetableMessage"

definitions:
  User:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      mail:
        type: "string"
      password:
        type: "string"
      group:
        $ref: "#/definitions/Group/properties/_id"
  UserInfo:
    type: "object"
    properties:
      _id:
        type: "string"
      name:
        type: "string"
      mail:
        type: "string"
  Grade:
    type: "object"
    properties:
      _id:
        type: "string"
      semester: 
        type: "number"
      value:
        type: "number"
      subject:
        type: "string"
      ects:
        type: "number"
      user:
        $ref: "#/definitions/User/properties/name"
  Group:
    type: "object"
    properties:
      _id:
        type: "string"
      field:
        type: "string"
      semester:
        type: "number"
      mode:
        type: "string"
  Timetable:
    type: "object"
    properties:
      group:
        $ref: "#/definitions/Group/properties/_id"
      day:
        type: "string"
      hour:
        type: "number"
      length:
        type: "number"
      subject:
        type: "string"
      type:
        type: "string"
      classroom:
        type: "string"
      lecturer:
        type: "string"
  Extralesson:
    type: "object"
    properties:
      day:
        type: "string"
      hour:
        type: "number"
      length:
        type: "number"
      subject:
        type: "string"
      type:
        type: "string"
      classroom:
        type: "string"
      lecturer:
        type: "string"
      user:
        $ref: "#/definitions/User/properties/name"
  TimetableMessage:  
    type: "object"
    properties:
      msg:
        type: "string"
        description: "Equal to 'OK' if operation sucessed, otherwise containt error message."
      timetable:
        type: array
        items:
          $ref: "#/definitions/Timetable"
    example:
        msg: "OK"
        timetable: [{
          _id: 5dceecce75f9530343aadf59,
          group: 5dbea6aff0df470180cb9f29,
          day: Sobota,
          hour: 8.15,
          length: 90,
          subject: Angielski,
          type: Lektorat,
          classroom: SPNJO,
          lecturer: Somebody
          }]
                    